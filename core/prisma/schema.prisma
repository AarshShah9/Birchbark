// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Doctor {
  id                 Int                  @id @default(autoincrement())
  name               String
  // Add the relation field for DoctorAppointments
  doctorAppointments DoctorAppointments[]
  AppointmentDoctors AppointmentDoctors[]
  Organization       Organization?        @relation(fields: [organizationId], references: [id])
  organizationId     Int?
}

model Patient {
  id                  Int                   @id @default(autoincrement())
  name                String
  // Add the relation field for PatientAppointments
  patientAppointments PatientAppointments[]
  AppointmentPatients AppointmentPatients[]
  Organization        Organization?         @relation(fields: [organizationId], references: [id])
  organizationId      Int?
}

model Clinic {
  id                 Int                  @id @default(autoincrement())
  name               String
  // Add the relation field for AppointmentClinics
  appointmentClinics AppointmentClinics[]
  address            String
  city               String
  province           provinces
}

model Appointment {
  id             Int      @id @default(autoincrement())
  subject        String // Subject of the appointment
  startTime      DateTime // Start date and time of the appointment
  endTime        DateTime // End date and time of the appointment
  location       String? // Location of the appointment (optional)
  description    String? // Description of the appointment (optional)
  recurrenceRule String? // Recurrence rule for recurring appointments (optional)
  isAllDay       Boolean // Whether the appointment is an all-day event
  isReadOnly     Boolean // Whether the appointment is read-only
  calendarId     Int // ID of the associated calendar
  doctorId       Int // ID of the associated doctor

  // Relationships
  appointmentDoctors  AppointmentDoctors[]
  appointmentPatients AppointmentPatients[]
  appointmentClinics  AppointmentClinics[]
  DoctorAppointments  DoctorAppointments[]
  PatientAppointments PatientAppointments[]

  // Indexes
  @@index([startTime, endTime]) // Index for querying appointments by time range
}

model DoctorAppointments {
  doctorId      Int
  appointmentId Int

  doctor      Doctor      @relation(fields: [doctorId], references: [id])
  appointment Appointment @relation(fields: [appointmentId], references: [id])

  @@id([doctorId, appointmentId])
  @@index([appointmentId])
  @@index([doctorId])
}

model PatientAppointments {
  patientId     Int
  appointmentId Int

  patient     Patient     @relation(fields: [patientId], references: [id])
  appointment Appointment @relation(fields: [appointmentId], references: [id])

  @@id([patientId, appointmentId])
  @@index([patientId])
  @@index([appointmentId])
}

model AppointmentDoctors {
  appointmentId Int
  doctorId      Int

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  doctor      Doctor      @relation(fields: [doctorId], references: [id])

  @@id([appointmentId, doctorId])
  @@index([appointmentId])
  @@index([doctorId])
}

model AppointmentPatients {
  appointmentId Int
  patientId     Int

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  patient     Patient     @relation(fields: [patientId], references: [id])

  @@id([appointmentId, patientId])
  @@index([appointmentId])
  @@index([patientId])
}

model AppointmentClinics {
  appointmentId Int
  clinicId      Int

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  clinic      Clinic      @relation(fields: [clinicId], references: [id])

  @@id([appointmentId, clinicId])
  @@index([appointmentId])
  @@index([clinicId])
}

model Organization {
  id        Int        @id @default(autoincrement())
  name      String // The name of the organization
  createdAt DateTime   @default(now()) // The time the organization was added
  updatedAt DateTime   @updatedAt // The last time the organization was updated
  city      String? // The city the organization is located in
  province  provinces? // The province the organization is located in
  address   String? // The address of the organization
  phone     String? // The phone number of the organization
  email     String? // The email of the organization
  website   String? // The website of the organization
  doctors   Doctor[] // The doctors that work at the organization
  patients  Patient[] // The patients that are registered at the organization
}

model Image {
  id          Int      @id @default(autoincrement())
  title       String // The title of the image
  url         String // The URL of the image in Cloudinary
  createdAt   DateTime @default(now()) // The time the image was added
  updatedAt   DateTime @updatedAt // The last time the image was updated
  description String? // The description of the image
}

model RequestQuotes {
  id                Int       @id @default(autoincrement())
  OrganizationName  String
  OrganizationEmail String
  OrganizationPhone String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  description       String
  province          provinces
  city              String
  status            Status    @default(Pending)
}

enum provinces {
  AB
  BC
  MB
  NB
  NL
  NS
  NT
  NU
  ON
  PEI
  QC
  SK
  YK
}

enum Status {
  Pending
  Confirmed
  Cancelled
  Completed
}
