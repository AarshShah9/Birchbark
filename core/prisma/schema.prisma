generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Doctor {
  id              Int      @id @default(autoincrement())
  name            String
  organisation_id Int
  clerk_id        Int
  email           String
  phone_num       String
  notification_on String
  patient         Patient? @relation(fields: [patientId], references: [id]) // Change to singular and use a relation to Patient model

  patientId         Int?
  Organisation      Organisation?       @relation(fields: [organisationId], references: [id])
  organisationId    Int?
  AppointmentDoctor AppointmentDoctor[]
}

model Patient {
  id              Int    @id @default(autoincrement())
  name            String
  organisation_id Int
  clerk_id        Int
  email           String
  phone_num       String
  notification_on String
  doctor_id       Int

  Doctor             Doctor[]
  Organisation       Organisation?        @relation(fields: [organisationId], references: [id])
  organisationId     Int?
  AppointmentPatient AppointmentPatient[]
}

model Appointment {
  id             Int      @id @default(autoincrement())
  subject        String
  startTime      DateTime
  endTime        DateTime
  location       String?
  description    String?
  recurrenceRule String?
  isAllDay       Boolean
  isReadOnly     Boolean
  calendarId     Int
  doctor_id      Int
  status         String

  AppointmentDoctor       AppointmentDoctor[]
  AppointmentPatient      AppointmentPatient[]
  AppointmentOrganisation AppointmentOrganisation[]
}

model Organisation {
  id                       Int                       @id @default(autoincrement())
  name                     String
  createdAt                DateTime
  updatedAt                DateTime
  city                     String
  province                 String
  address                  String
  phone                    String
  email                    String
  website                  String
  doctor                   Doctor[]
  patients                 Patient[]
  clerkId                  Int
  appointmentOrganisations AppointmentOrganisation[]
  stripeId                 String?
}

model Image {
  id          Int      @id @default(autoincrement())
  title       String
  blobURL     String
  createdAt   DateTime
  updatedAt   DateTime
  description String
}

model RequestQuote {
  id               Int             @id @default(autoincrement())
  organisationName String
  createdAt        DateTime
  updatedAt        DateTime
  description      String
  province         String
  city             String
  status           String
  generatedNote    GeneratedNote[]
}

model GeneratedNote {
  id             Int           @id @default(autoincrement())
  title          String
  description    String
  blobURL        String
  appointmentID  Int
  RequestQuote   RequestQuote? @relation(fields: [requestQuoteId], references: [id])
  requestQuoteId Int?
}

model AppointmentDoctor {
  id            Int         @id @default(autoincrement())
  appointmentId Int
  doctorId      Int
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  doctor        Doctor      @relation(fields: [doctorId], references: [id])
}

model AppointmentPatient {
  id            Int         @id @default(autoincrement())
  appointmentId Int
  patientId     Int
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  patient       Patient     @relation(fields: [patientId], references: [id])
}

model AppointmentOrganisation {
  id             Int          @id @default(autoincrement())
  appointmentId  Int
  organisationId Int
  appointment    Appointment  @relation(fields: [appointmentId], references: [id])
  organisation   Organisation @relation(fields: [organisationId], references: [id])
}
