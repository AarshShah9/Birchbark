// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Doctor {
  id              Int      @id @default(autoincrement())
  name            String
  organisation_id Int
  clerk_id        Int
  email           String
  phone_num       String
  notification_on String
  patient         Patient? @relation(fields: [patientId], references: [id]) // Change to singular and use a relation to Patient model

  patientId         Int?
  Organisation      Organization?       @relation(fields: [organisationId], references: [id])
  organisationId    Int?
  AppointmentDoctor AppointmentDoctor[]

  @@index([patientId])
  @@index([organisationId])
}

model Patient {
  id              Int    @id @default(autoincrement())
  name            String
  organisation_id Int
  clerk_id        Int
  email           String
  phone_num       String
  notification_on String
  doctor_id       Int

  Doctor             Doctor[]
  Organisation       Organization?        @relation(fields: [organisationId], references: [id])
  organisationId     Int?
  AppointmentPatient AppointmentPatient[]

  @@index([organisationId])
}

model Organization {
  id                       Int                       @id @default(autoincrement())
  name                     String
  createdAt                DateTime
  updatedAt                DateTime
  city                     String
  province                 String
  address                  String
  phone                    String
  email                    String
  website                  String
  doctor                   Doctor[]
  patients                 Patient[]
  clerkId                  Int
  appointmentOrganisations AppointmentOrganization[]
  stripeId                 String?
}

model Appointment {
  id             Int      @id @default(autoincrement())
  subject        String
  startTime      DateTime
  endTime        DateTime
  location       String?
  description    String?
  recurrenceRule String?
  isAllDay       Boolean
  isReadOnly     Boolean
  calendarId     Int
  doctor_id      Int
  status         String

  AppointmentDoctor       AppointmentDoctor[]
  AppointmentPatient      AppointmentPatient[]
  AppointmentOrganisation AppointmentOrganization[]
}

model Image {
  id          Int      @id @default(autoincrement())
  title       String // The title of the image
  blobUrl     String // The URL of the image in Cloudinary
  createdAt   DateTime @default(now()) // The time the image was added
  updatedAt   DateTime @updatedAt // The last time the image was updated
  description String? // The description of the image
}

model RequestQuote {
  id                Int             @id @default(autoincrement())
  OrganizationName  String
  OrganizationEmail String
  OrganizationPhone String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  description       String
  province          provinces
  city              String
  status            Status          @default(Pending)
  generatedNote     GeneratedNote[]
}

model GeneratedNote {
  id             Int           @id @default(autoincrement())
  title          String
  description    String
  blobURL        String
  appointmentID  Int
  RequestQuote   RequestQuote? @relation(fields: [requestQuoteId], references: [id])
  requestQuoteId Int?

  @@index([requestQuoteId])
}

model AppointmentDoctor {
  id            Int         @id @default(autoincrement())
  appointmentId Int
  doctorId      Int
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  doctor        Doctor      @relation(fields: [doctorId], references: [id])

  @@index([appointmentId])
  @@index([doctorId])
}

model AppointmentPatient {
  id            Int         @id @default(autoincrement())
  appointmentId Int
  patientId     Int
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  patient       Patient     @relation(fields: [patientId], references: [id])

  @@index([appointmentId])
  @@index([patientId])
}

model AppointmentOrganization {
  id             Int          @id @default(autoincrement())
  appointmentId  Int
  organisationId Int
  appointment    Appointment  @relation(fields: [appointmentId], references: [id])
  organisation   Organization @relation(fields: [organisationId], references: [id])

  @@index([appointmentId])
  @@index([organisationId])
}

enum provinces {
  AB
  BC
  MB
  NB
  NL
  NS
  NT
  NU
  ON
  PEI
  QC
  SK
  YK
}

enum Status {
  Pending
  Confirmed
  Cancelled
  Completed
}
