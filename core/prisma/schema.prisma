// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Doctor {
  id             Int       @id @default(autoincrement())
  name           String /// @encrypted
  clerkId        String?   @unique
  email          String /// @encrypted
  phoneNumber    String /// @encrypted
  notificationOn Boolean   @default(false)
  patient        Patient[]

  Organization   Organization?  @relation(fields: [OrganizationId], references: [id])
  OrganizationId Int?
  Availability   Availability[]
  appointments   Appointment[]

  @@index([OrganizationId])
}

model Patient {
  id             Int     @id @default(autoincrement())
  name           String /// @encrypted
  clerkId        String? @unique
  email          String /// @encrypted
  phoneNumber    String /// @encrypted
  notificationOn Boolean @default(false)
  doctorId       Int
  doctor         Doctor  @relation(fields: [doctorId], references: [id])

  Organization   Organization? @relation(fields: [OrganizationId], references: [id])
  OrganizationId Int?
  appointments   Appointment[]

  @@index([doctorId])
  @@index([OrganizationId])
}

model StripeEvent {
  id              String   @id @unique
  apiVersion      String?
  data            Json
  request         Json?
  type            String
  object          String
  account         String?
  created         DateTime
  livemode        Boolean
  pendingWebhooks Int
}

model Organization {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  phone     String
  email     String
  website   String?
  doctor    Doctor[]
  patients  Patient[]
  clerkId   String?   @unique
  address   Address?

  activated Boolean @default(false)

  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus StripeSubscriptionStatus?
}

model Address {
  id             Int           @id @default(autoincrement())
  street         String /// @encrypted
  city           String /// @encrypted
  province       provinces
  postalCode     String /// @encrypted
  apt            String? /// @encrypted
  Organization   Organization? @relation(fields: [OrganizationId], references: [id])
  OrganizationId Int?          @unique

  @@index([OrganizationId])
}

model Appointment {
  id          Int      @id @default(autoincrement())
  subject     String /// @encrypted
  startTime   DateTime
  endTime     DateTime
  description String? /// @encrypted
  isAllDay    Boolean  @default(false)
  isReadOnly  Boolean  @default(false)
  statusM     Status   @default(Pending)
  doctorId    Int
  patientId   Int
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
  patient     Patient  @relation(fields: [patientId], references: [id])

  @@index([doctorId])
  @@index([patientId])
}

model Availability {
  id        Int      @id @default(autoincrement())
  doctorId  Int
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  date      DateTime
  startTime DateTime
  endTime   DateTime

  @@index([doctorId])
}

enum Status {
  Confirmed /// @encrypted
  Pending /// @encrypted
  Cancelled /// @encrypted
  Stale /// @encrypted
  Completed /// @encrypted
}

model Image {
  id          Int      @id @default(autoincrement())
  title       String // The title of the image
  blobUrl     String // The URL of the image in Cloudinary
  createdAt   DateTime @default(now()) // The time the image was added
  updatedAt   DateTime @updatedAt // The last time the image was updated
  description String? // The description of the image
}

model RequestQuote {
  id                Int             @id @default(autoincrement())
  OrganizationName  String
  OrganizationEmail String
  OrganizationPhone String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  description       String
  province          provinces
  city              String
  status            Status          @default(Pending)
  generatedNote     GeneratedNote[]
}

model GeneratedNote {
  id             Int           @id @default(autoincrement())
  title          String
  description    String
  blobURL        String
  appointmentID  Int
  RequestQuote   RequestQuote? @relation(fields: [requestQuoteId], references: [id])
  requestQuoteId Int?

  @@index([requestQuoteId])
}

model Article {
  id          Int            @id @default(autoincrement())
  title       String         @db.VarChar(255)
  description String?        @db.Text
  content     ContentBlock[]
  categoryId  Int // Foreign key for Category relation
  category    Category       @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Event {
  id        Int            @id @default(autoincrement())
  title     String
  date      DateTime
  content   ContentBlock[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model ContentBlock {
  id        Int         @id @default(autoincrement())
  type      ContentType
  content   String
  order     Int
  article   Article?    @relation(fields: [articleId], references: [id])
  articleId Int?
  event     Event?      @relation(fields: [eventId], references: [id])
  eventId   Int?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([articleId])
  @@index([eventId])
}

enum ContentType {
  TEXT
  IMAGE
  VIDEO
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(255)
  articles Article[] // Relation field for the articles in this category
}

// Enumerations
enum StripeSubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

enum provinces {
  AB /// @encrypted
  BC /// @encrypted
  MB /// @encrypted
  NB /// @encrypted
  NL /// @encrypted
  NS /// @encrypted
  NT /// @encrypted
  NU /// @encrypted
  ON /// @encrypted
  PEI /// @encrypted
  QC /// @encrypted
  SK /// @encrypted
  YK /// @encrypted
}
